"""
Teste unit√°rio da fun√ß√£o read_excel_files() do m√≥dulo ingestion.

Valida que a fun√ß√£o executa sem erros e retorna a estrutura esperada.
"""

import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import logging
import yaml
from src.data_processing.ingestion import read_excel_files

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')


def test_read_excel_files():
    """Testa leitura de m√∫ltiplos arquivos Excel."""

    print("\n" + "=" * 80)
    print("TESTE UNIT√ÅRIO: read_excel_files()")
    print("=" * 80)

    # Carregar config
    import glob
    config_path = os.path.join(os.path.dirname(__file__), '..', 'configs', 'devclub.yaml')
    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)

    data_dir = config['ingestion']['training_data_dir']
    test_files = sorted(glob.glob(os.path.join(data_dir, "*.xlsx")))

    # Verificar se arquivos existem
    missing_files = [f for f in test_files if not os.path.exists(f)]
    if missing_files:
        print("\n‚ö†Ô∏è  Arquivos n√£o encontrados:")
        for f in missing_files:
            print(f"   - {f}")
        print("\nAjuste os caminhos no teste conforme sua estrutura de dados.")
        return

    print(f"\nüìÇ Testando leitura de {len(test_files)} arquivo(s)...\n")

    # Executar fun√ß√£o
    result = read_excel_files(test_files)

    # Valida√ß√µes b√°sicas
    print("\n" + "=" * 80)
    print("RESULTADOS DO TESTE UNIT√ÅRIO:")
    print("=" * 80)

    print(f"\n‚úÖ Total de arquivos lidos: {len(result)}")

    for filename, sheets in result.items():
        print(f"\nüìÑ Arquivo: {filename}")
        print(f"   N√∫mero de abas: {len(sheets)}")

        for sheet_name, df in sheets.items():
            print(f"     ‚Ä¢ Aba '{sheet_name}': {len(df):,} linhas √ó {len(df.columns)} colunas")

    # Asser√ß√µes
    assert isinstance(result, dict), "Resultado deve ser um dicion√°rio"
    assert len(result) == len(test_files), f"Deve ter lido {len(test_files)} arquivos"

    for filename, sheets in result.items():
        assert isinstance(sheets, dict), f"Abas de {filename} devem ser um dicion√°rio"
        assert len(sheets) > 0, f"{filename} deve ter pelo menos uma aba"

    print("\n" + "=" * 80)
    print("TESTE UNIT√ÅRIO CONCLU√çDO")
    print("=" * 80)
    print("\n‚ö†Ô∏è  AGUARDANDO VALIDA√á√ÉO DO USU√ÅRIO (√∫nica fonte da verdade)")


if __name__ == "__main__":
    test_read_excel_files()
