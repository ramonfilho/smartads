"""
M√≥dulo de pr√©-processamento de dados para o pipeline de lead scoring.
Mant√©m a l√≥gica EXATA do notebook original para garantir reprodutibilidade.
"""

import pandas as pd
from typing import Dict, Tuple, List
import logging

logger = logging.getLogger(__name__)


def remove_duplicates(df: pd.DataFrame) -> pd.DataFrame:
    """
    Remove linhas duplicadas mantendo a primeira ocorr√™ncia.

    Mant√©m comportamento ID√äNTICO ao notebook original:
    - df.drop_duplicates(keep='first')

    Args:
        df: DataFrame com poss√≠veis duplicatas

    Returns:
        DataFrame sem duplicatas
    """
    return df.drop_duplicates(keep='first')


def get_columns_to_remove() -> List[str]:
    """
    Lista de colunas para remover em produ√ß√£o.

    Como em produ√ß√£o trabalharemos apenas com arquivos no formato LF24,
    removemos:
    - Colunas de scoring/faixas (geradas pelo modelo, n√£o features)
    - Colunas t√©cnicas que est√£o sempre vazias no arquivo de produ√ß√£o

    Returns:
        Lista com nomes das colunas a remover
    """
    return [
        # Colunas de score/faixa (resultado do modelo, n√£o features)
        'Pontua√ß√£o',
        'Score',
        'Faixa',
        'Faixa A',
        'Faixa B',
        'Faixa C',
        'Faixa D',
        # Colunas t√©cnicas (sempre vazias no arquivo de produ√ß√£o)
        'Remote IP',
        'User Agent',
        'fbc',
        'fbp',
        'cidade',
        'estado',
        'pais',
        'cep',
        'externalid',
        'Page URL',
        'Qual estado voc√™ mora?'
    ]


def clean_columns(df: pd.DataFrame) -> pd.DataFrame:
    """
    Remove colunas desnecess√°rias do DataFrame.

    Segue l√≥gica adaptada da Se√ß√£o 3 do notebook original:
    - Remove colunas de scoring/faixas (resultado do modelo, n√£o features)
    - Remove colunas Unnamed (se existirem)

    Args:
        df: DataFrame com colunas a limpar

    Returns:
        DataFrame sem as colunas desnecess√°rias
    """
    # Print do cabe√ßalho para compara√ß√£o com notebook
    logger.info("LIMPEZA DE COLUNAS DESNECESS√ÅRIAS - ARQUIVOS FILTRADOS")
    logger.info("=" * 60)

    df_clean = df.copy()
    colunas_antes = len(df_clean.columns)

    # Lista de colunas para remover
    columns_to_remove = get_columns_to_remove()
    columns_to_remove_lower = [col.lower() for col in columns_to_remove]

    # Identificar colunas presentes no DataFrame para remover
    columns_to_drop = []

    for col in df_clean.columns:
        # Remover se est√° na lista exata (case-insensitive)
        if col.lower() in columns_to_remove_lower:
            columns_to_drop.append(col)
        # Remover colunas Unnamed
        elif col.startswith('Unnamed:'):
            columns_to_drop.append(col)

    # Aplicar remo√ß√£o se houver colunas para remover
    if columns_to_drop:
        df_clean = df_clean.drop(columns=columns_to_drop)

    colunas_depois = len(df_clean.columns)
    colunas_removidas = len(columns_to_drop)

    # Print do relat√≥rio similar ao notebook
    logger.info(f"{'ARQUIVO':<35} {'ABA':<20} {'ANTES':>8} {'DEPOIS':>8} {'REMOVIDAS':>10}")
    logger.info("-" * 90)
    logger.info(f"{'pipeline_input':<35} {'dados':<20} {colunas_antes:>8} {colunas_depois:>8} {colunas_removidas:>10}")
    logger.info("-" * 90)
    logger.info(f"Total de colunas removidas: {colunas_removidas}")
    if columns_to_drop:
        logger.info(f"Colunas removidas: {columns_to_drop}")
    logger.info(f"\nDados limpos dispon√≠veis na vari√°vel 'arquivos_filtrados_limpos'")

    # DEBUG: Listar colunas exatas ap√≥s limpeza
    logger.info(f"\nüîç DEBUG - COLUNAS AP√ìS LIMPEZA PIPELINE V2:")
    logger.info(f"Total de colunas: {len(df_clean.columns)}")
    logger.info("Colunas restantes ap√≥s limpeza:")
    for i, col in enumerate(sorted(df_clean.columns), 1):
        logger.info(f"  {i:2d}. {col}")

    return df_clean


def get_campaign_features_to_remove() -> List[str]:
    """
    Lista de features relacionadas a campanhas espec√≠ficas para remover.

    Adaptado da Se√ß√£o 8 do notebook original:
    - Campaign: lan√ßamento espec√≠fico, n√£o √∫til para modelo generalizado
    - Content: an√∫ncios individuais, caracter√≠sticas espec√≠ficas do lan√ßamento

    Returns:
        Lista com nomes das features de campanha a remover
    """
    return [
        'Campaign',  # Lan√ßamento espec√≠fico
        'Content'    # An√∫ncios individuais
    ]


def remove_campaign_features(df: pd.DataFrame) -> pd.DataFrame:
    """
    Remove features relacionadas a campanhas espec√≠ficas.

    Segue l√≥gica EXATA da Se√ß√£o 8 do notebook original:
    - Remove colunas Campaign e Content
    - Remove colunas problem√°ticas (vazias, None, etc.) se existirem

    Args:
        df: DataFrame com features de campanha

    Returns:
        DataFrame sem features de campanha
    """
    # Print do cabe√ßalho para compara√ß√£o com notebook
    logger.info("REMO√á√ÉO DE FEATURES DESNECESS√ÅRIAS")
    logger.info("=" * 38)

    df_clean = df.copy()
    logger.info(f"Dataset inicial: {len(df_clean)} registros, {len(df_clean.columns)} colunas")

    # Features de campanha para remover
    campaign_features = get_campaign_features_to_remove()

    # Identificar colunas problem√°ticas (como no notebook original)
    problematic_columns = []
    for col in df_clean.columns:
        if col == '' or pd.isna(col) or col is None:
            problematic_columns.append(col)
        elif isinstance(col, str) and col.strip() == '':
            problematic_columns.append(col)

    # Combinar todas as colunas para remover
    columns_to_remove = campaign_features + problematic_columns

    logger.info(f"\nFeatures marcadas para remo√ß√£o:")
    for feature in columns_to_remove:
        if feature == '' or pd.isna(feature) or feature is None:
            logger.info(f"  - Coluna problem√°tica: {repr(feature)}")
        else:
            logger.info(f"  - {feature}")

    # Identificar quais colunas existem no DataFrame
    columns_to_drop = []
    for col in columns_to_remove:
        if col in df_clean.columns:
            columns_to_drop.append(col)

    # Aplicar remo√ß√£o se houver colunas para remover
    if columns_to_drop:
        logger.info(f"\nColunas encontradas e removidas:")
        for coluna in columns_to_drop:
            if coluna == '' or pd.isna(coluna) or coluna is None:
                logger.info(f"  ‚úì Coluna problem√°tica removida: {repr(coluna)}")
            else:
                logger.info(f"  ‚úì {coluna} removida")
        df_clean = df_clean.drop(columns=columns_to_drop)

        logger.info(f"\nDataset ap√≥s remo√ß√£o: {len(df_clean)} registros, {len(df_clean.columns)} colunas")

    # DEBUG: Listar colunas restantes ap√≥s Sess√£o 8 (ordem real)
    logger.info(f"\nüîç COLUNAS RESTANTES NO DATASET:")
    logger.info("-" * 40)
    for i, col in enumerate(df_clean.columns, 1):
        logger.info(f"{i:2d}. {col}")

    return df_clean


def remove_technical_fields(df: pd.DataFrame) -> pd.DataFrame:
    """
    Remove campos t√©cnicos que n√£o s√£o features para o modelo.

    Baseado na lista de colunas removidas no notebook original (linha 145-170).
    Esses campos s√£o metadados t√©cnicos ou informa√ß√µes n√£o relevantes para o modelo.

    Args:
        df: DataFrame com campos t√©cnicos

    Returns:
        DataFrame sem campos t√©cnicos
    """
    df_clean = df.copy()

    # Lista de campos t√©cnicos para remover (baseada no notebook linha 145-170)
    technical_fields = [
        'Page URL',
        'Remote IP',
        'User Agent',
        'cep',
        'cidade',
        'estado',
        'pais',
        'externalid',
        'fbc',
        'fbp',
        'Qual estado voc√™ mora?'  # Campo que deveria ser removido segundo o notebook
    ]

    # Identificar quais campos existem no DataFrame
    columns_to_drop = []
    for col in technical_fields:
        if col in df_clean.columns:
            columns_to_drop.append(col)

    # Aplicar remo√ß√£o se houver colunas para remover
    if columns_to_drop:
        df_clean = df_clean.drop(columns=columns_to_drop)

    return df_clean


def rename_long_column_names(df: pd.DataFrame) -> pd.DataFrame:
    """
    Renomeia colunas com nomes longos para vers√µes simplificadas.

    Baseado no notebook original (linhas 355-385) onde as colunas com nomes longos
    s√£o renomeadas para vers√µes mais curtas e as originais s√£o removidas.

    Args:
        df: DataFrame com colunas de nomes longos

    Returns:
        DataFrame com colunas renomeadas
    """
    df_clean = df.copy()

    # Mapeamento de nomes longos para nomes curtos (baseado no notebook)
    rename_mapping = {
        'J√° investiu em algum curso online para aprender uma nova forma de ganhar dinheiro?': 'investiu_curso_online',
        'O que mais te chama aten√ß√£o na profiss√£o de Programador?': 'interesse_programacao'
    }

    # Aplicar renomea√ß√£o se as colunas existirem
    for old_name, new_name in rename_mapping.items():
        if old_name in df_clean.columns:
            df_clean[new_name] = df_clean[old_name]
            df_clean = df_clean.drop(columns=[old_name])

    return df_clean